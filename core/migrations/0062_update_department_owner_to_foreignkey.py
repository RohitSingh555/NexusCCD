# Generated by Django 4.2.7 on 2025-10-29 09:51

from django.db import migrations, models
import django.db.models.deletion


def migrate_department_owners(apps, schema_editor):
    """Migrate existing department owner strings to Staff foreign keys"""
    Department = apps.get_model('core', 'Department')
    Staff = apps.get_model('core', 'Staff')
    
    # For each department with an owner string, try to find a matching staff member
    for department in Department.objects.filter(owner__isnull=False):
        if isinstance(department.owner, str) and department.owner.strip():
            # Try to find a staff member by name
            owner_name = department.owner.strip()
            
            # Try different name matching strategies
            staff_member = None
            
            # First try exact match with first_name + last_name
            if ' ' in owner_name:
                first_name, last_name = owner_name.split(' ', 1)
                staff_member = Staff.objects.filter(
                    first_name__iexact=first_name.strip(),
                    last_name__iexact=last_name.strip()
                ).first()
            
            # If no match, try with user's first_name and last_name
            if not staff_member:
                staff_member = Staff.objects.filter(
                    user__first_name__iexact=owner_name.split(' ')[0] if ' ' in owner_name else owner_name,
                    user__last_name__iexact=owner_name.split(' ')[-1] if ' ' in owner_name else ''
                ).first()
            
            # If still no match, try with email
            if not staff_member:
                staff_member = Staff.objects.filter(
                    email__iexact=owner_name
                ).first()
            
            # If still no match, try with user's username
            if not staff_member:
                staff_member = Staff.objects.filter(
                    user__username__iexact=owner_name
                ).first()
            
            if staff_member:
                # Update the department owner to the found staff member
                department.owner = staff_member
                department.save()
                print(f"Migrated department '{department.name}' owner to staff '{staff_member}'")
            else:
                # If no matching staff found, set owner to None
                department.owner = None
                department.save()
                print(f"Could not find staff member for department '{department.name}' owner '{owner_name}', set to None")


def reverse_migrate_department_owners(apps, schema_editor):
    """Reverse migration - convert Staff foreign keys back to strings"""
    Department = apps.get_model('core', 'Department')
    
    for department in Department.objects.filter(owner__isnull=False):
        if hasattr(department.owner, 'first_name') and hasattr(department.owner, 'last_name'):
            # Convert staff member back to string
            owner_name = f"{department.owner.first_name} {department.owner.last_name}".strip()
            if not owner_name or owner_name == ' ':
                owner_name = department.owner.email or department.owner.user.username if department.owner.user else 'Unknown'
            department.owner = owner_name
            department.save()


class Migration(migrations.Migration):

    dependencies = [
        ('core', '0061_populate_audit_fields_for_programs'),
    ]

    operations = [
        # First, add the new foreign key field as nullable
        migrations.AddField(
            model_name='department',
            name='owner_new',
            field=models.ForeignKey(blank=True, help_text='Department leader/owner', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='owned_departments', to='core.staff'),
        ),
        # Migrate the data
        migrations.RunPython(
            migrate_department_owners,
            reverse_migrate_department_owners,
        ),
        # Remove the old field
        migrations.RemoveField(
            model_name='department',
            name='owner',
        ),
        # Rename the new field to the original name
        migrations.RenameField(
            model_name='department',
            old_name='owner_new',
            new_name='owner',
        ),
    ]
